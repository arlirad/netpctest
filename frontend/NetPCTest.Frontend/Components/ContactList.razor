@using NetPCTest.Frontend.Dtos
@using NetPCTest.Frontend.Services
@using NetPCTest.Frontend.Components.Modals
@inject IAuthService AuthService
@inject IContactsService ContactsService
@inject ICategoriesService CategoriesService

@*
 * Displays the list of contacts and allows for viewing of their details.
 * Allows for modification of data when the user is logged in.
 *@

@if (ContactsBrief is null)
{
    <h1><L Key="loading"/></h1>
}
else
{
    <p>@(RangeStart + 1) - @(RangeStart + PageSize) (@TotalContactCount)</p>

    if (IsAuthenticated)
    {
        <button class="layer2" type="submit" @onclick="ShowCreation">
            <L Key="ui.list.contact.create"/>
        </button>
        <br/>
    }
    else
    {
        <p><L Key="ui.list.contact.create_login_required"/></p>
    }
    
    <button class="layer2" type="submit" @onclick="PreviousPage">
        <L Key="ui.list.page.previous"/>
    </button>
    <button class="layer2" type="submit" @onclick="NextPage">
        <L Key="ui.list.page.next"/>
    </button>

    <table class="layer2">
        <tr>
            <th>
                <L Key="ui.list.contact.id"/>
            </th>
            <th>
                <L Key="ui.list.contact.name"/>
            </th>
            <th>
                <L Key="ui.list.contact.surname"/>
            </th>
        </tr>
        
        @foreach (var contact in ContactsBrief)
        {
            @* XSS need not apply, Blazor treats this as InnerText and not InnerHtml. *@
            <tr @onclick="() => ShowDetails(contact)">
                <td>@contact.Id</td><td>@contact.Name</td><td>@contact.Surname</td>
            </tr>
        }
    </table>
}

@if (_showDetails && SelectedContactId.HasValue)
{
    <DetailsModal ContactId="SelectedContactId.Value" OnDeleted="Deleted" OnEdited="Edited" OnClose="CloseDetails"></DetailsModal>
}

@if (_showCreation)
{
    <CreationModal OnCreated="Created" OnClose="CloseCreation"></CreationModal>
}

@code {
    [Parameter] 
    public List<ContactBriefDto>? ContactsBrief { get; set; }
    
    private const int PageSize = 50;
    
    private int TotalContactCount { get; set; }
    private int RangeStart { get; set; }
    private int? SelectedContactId { get; set; }
    private bool IsAuthenticated { get; set; }
    
    private bool _showCreation = false;
    private bool _showDetails = false;

    public async Task Get(int start)
    {
        RangeStart = start;
        TotalContactCount = await ContactsService.GetContactCountAsync();
        
        var contacts = await ContactsService.GetContactsAsync(RangeStart, PageSize);

        if (contacts is null)
            return;
        
        ContactsBrief = contacts;
        StateHasChanged();
    }

    public async Task Refresh()
    {
        await Get(RangeStart);
    }

    public void Dispose()
    {
        AuthService.AuthStateChangedAsync -= AuthServiceOnAuthStateChangedAsync;
    }

    protected override async Task OnInitializedAsync()
    {
        AuthService.AuthStateChangedAsync += AuthServiceOnAuthStateChangedAsync;
        
        IsAuthenticated = await AuthService.IsLoggedIn();
        
        await CategoriesService.RefreshCategoriesAsync();
        await Get(0);
    }

    private void ShowDetails(ContactBriefDto contactBrief)
    {
        SelectedContactId = contactBrief.Id;
        _showDetails = true;
    }

    private void ShowCreation() => _showCreation = true;

    private async Task Edited() => await Refresh();

    private async Task Deleted()
    {
        SelectedContactId = null;
        await Refresh();
    }

    private async Task Created() => await Refresh();

    private void CloseDetails() => _showDetails = false;
    private void CloseCreation() => _showCreation = false;

    private async Task AuthServiceOnAuthStateChangedAsync()
    {
        IsAuthenticated = await AuthService.IsLoggedIn();
        StateHasChanged();
    }

    private async Task PreviousPage()
    {
        if (RangeStart == 0)
            return;

        RangeStart -= PageSize;
        
        await Refresh();
    }

    private async Task NextPage()
    {
        if (RangeStart + PageSize >= TotalContactCount)
            return;

        RangeStart += PageSize;

        await Refresh();
    }
}