@using Microsoft.AspNetCore.Components.Authorization
@using NetPCTest.Frontend.Services
@using NetPCTest.Frontend.Components.Modals
@inject IAuthService AuthService

<div class="layer2 navbar">
    @if (!IsAuthenticated)
    {
        <div class="layer3 navbar-button" @onclick="ClickLogin"><L Key="ui.login"/></div>
    }
    else
    {
        <p>@AuthenticatedEmail</p>
        <div class="layer3 navbar-button" @onclick="ClickLogout"><L Key="ui.logout"/></div>
    }
</div>

@if (ShowLogin)
{
    <LoginModal OnLoggedIn="LoggedIn" OnClose="CloseLogin"></LoginModal>
}


@code {
    [Parameter]
    public EventCallback OnClickLogin { get; set; }
    [Parameter]
    public EventCallback OnClickLogout { get; set; }
    
    private string? AuthenticatedEmail { get; set; }
    private bool IsAuthenticated { get; set; }
    private bool ShowLogin { get; set; }

    private void ClickLogin() => ShowLogin = true;
    private void CloseLogin() => ShowLogin = false;

    private async Task LoggedIn()
    {
        AuthenticatedEmail = await AuthService.GetEmail();
        IsAuthenticated = await AuthService.IsLoggedIn();

        StateHasChanged();
    }

    private async Task ClickLogout()
    {
        await AuthService.Logout();
        
        AuthenticatedEmail = null;
        IsAuthenticated = false;

        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        AuthService.AuthStateChangedAsync += AuthServiceOnAuthStateChangedAsync;
        
        AuthenticatedEmail = await AuthService.GetEmail();
        IsAuthenticated = await AuthService.IsLoggedIn();
    }

    public void Dispose()
    {
        AuthService.AuthStateChangedAsync -= AuthServiceOnAuthStateChangedAsync;
    }

    private async Task AuthServiceOnAuthStateChangedAsync()
    {
        AuthenticatedEmail = await AuthService.GetEmail();
        IsAuthenticated = await AuthService.IsLoggedIn();
    }
}