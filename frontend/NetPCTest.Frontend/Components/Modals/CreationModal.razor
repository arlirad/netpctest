@using AutoMapper
@using NetPCTest.Frontend.Dtos
@using NetPCTest.Frontend.Models
@using NetPCTest.Frontend.Services
@using NetPCTest.Frontend.Validators
@inject ContactsService ContactsService
@inject CategoryService CategoryService
@inject ContactFormValidator ContactFormValidator
@inject IMapper Mapper

<Modal Header="ui.contact.create" OnClose="Close" MinimumWidth="500px">
    <EditForm Model="@FormData" OnValidSubmit="HandleSubmit">
        @if (_validationErrors is not null)
        {
            foreach (var error in _validationErrors)
            {
                <p class="validation-error"><L Key="@error.Message"/></p>
            }
        } 
        
        <label><L Key="ui.contact.details.name"/></label>
        <InputText @bind-Value="FormData.Name" class="layer2 layer2-input" required/>
        <label><L Key="ui.contact.details.surname"/></label>
        <InputText @bind-Value="FormData.Surname" class="layer2 layer2-input" required/>
        <label><L Key="ui.contact.details.email"/></label>
        <InputText @bind-Value="FormData.Email" class="layer2 layer2-input" type="email" required/>
        <label><L Key="ui.contact.details.phone"/></label>
        <InputText @bind-Value="FormData.Phone" class="layer2 layer2-input" required/>
        <label><L Key="ui.contact.details.birthdate"/></label>
        <InputDate @bind-Value="FormData.BirthDate" class="layer2 layer2-input" required/>
        <hr noshade/>

        <label><L Key="ui.contact.details.category"/></label>
        <InputSelect @bind-Value="FormData.CategoryId" class="layer2 layer2-input">
            @foreach (var category in CategoryService.GetCategories())
            {
                <option value="@category.Id"><L Key="@category.Name"/></option>
            }
        </InputSelect>

        @{
            var category = CategoryService.GetCategory(FormData.CategoryId);
            // Hey, at this point if we get a null category we have bigger problems anyway.
            if (category is null)
                throw new NullReferenceException();
        }

        @if (!category.CustomSubcategoryRequired)
        {
            if (category.SubCategories.Count > 0 &&
                category.SubCategories.All(s => s.Id != FormData.SubCategoryId))
                FormData.SubCategoryId = category.SubCategories.First().Id;

            if (category.SubCategories.Count > 0)
            {
                <label>
                    <L Key="ui.contact.details.subcategory"/>
                </label>
                <InputSelect @bind-Value="FormData.SubCategoryId" class="layer2 layer2-input">
                    @foreach (var subCategory in category.SubCategories)
                    {
                        <option value="@subCategory.Id">
                            <L Key="@subCategory.Name"/>
                        </option>
                    }
                </InputSelect>
            }
        }
        else
        {
            <label><L Key="ui.contact.details.custom_subcategory"/></label>
            <InputText @bind-Value="FormData.CustomSubCategory" class="layer2 layer2-input" required/>
        }
        <hr noshade/>

        <label><L Key="ui.contact.edit.password"/></label>
        <InputText @bind-Value="FormData.Password" class="layer2 layer2-input" type="password"/>
        <label><L Key="ui.contact.edit.password.confirm"/></label>
        <InputText @bind-Value="FormData.ConfirmPassword" class="layer2 layer2-input" type="password"/>

        <button class="layer2" type="submit"><L Key="ui.contact.create.submit"/></button>
    </EditForm>
</Modal>

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }
    [Parameter]
    public EventCallback OnCreated { get; set; }

    private ContactEditFormModel FormData { get; set; } = new();
    private List<ValidationError>? _validationErrors;
    
    protected override void OnInitialized()
    {
        FormData.CategoryId = CategoryService.GetCategories().First().Id;
        base.OnInitialized();
    }

    private async Task HandleSubmit()
    {
        var validationErrors = ContactFormValidator.Validate(FormData, true);

        if (validationErrors.Any())
        {
            _validationErrors = validationErrors;
            return;
        }

        _validationErrors?.Clear();
        
        var category = CategoryService.GetCategory(FormData.CategoryId);
        // C# forced my hand to use an explicit type here.
        int? subCategoryId = category?.SubCategories.Count > 0 ? FormData.SubCategoryId : null;
        var customSubCategory = category?.SubCategories.Count == 0 ? FormData.CustomSubCategory : null;

        var newData = Mapper.Map<ContactCreationDto>(FormData);
        
        var result = await ContactsService.CreateContact(newData);
        if (!result)
            return;

        await OnCreated.InvokeAsync();
        await Close();
    }

    private async Task Close() => await OnClose.InvokeAsync();
}