@using NetPCTest.Frontend.Components;
@using NetPCTest.Frontend.Dtos
@using NetPCTest.Frontend.Models
@using NetPCTest.Frontend.Services
@inject IAuthService AuthService
@inject ContactsService ContactsService
@inject CategoryService CategoryService

<Modal Header="ui.contact.details" OnClose="Close" MinimumWidth="500px">
    <label><L Key="ui.contact.details.name"/></label>
    <p class="data">@ContactDto.Name</p>
    <label><L Key="ui.contact.details.surname"/></label>
    <p class="data">@ContactDto.Surname</p>
    <label><L Key="ui.contact.details.email"/></label>
    <p class="data">@ContactDto.Email</p>
    <label><L Key="ui.contact.details.phone"/></label>
    <p class="data">@ContactDto.Phone</p>
    <label><L Key="ui.contact.details.birthdate"/></label>
    <p class="data">@ContactDto.BirthDate</p>
    <hr noshade/>
    
    <label><L Key="ui.contact.details.category"/></label>
    <p class="data"><L Key="@CategoryService.GetCategory(ContactDto.CategoryId)?.Name"/></p>
    
    @if (ContactDto.SubCategoryId != null)
    {
        <label><L Key="ui.contact.details.subcategory"/></label>
        <p class="data"><L Key="@CategoryService.GetSubCategory(ContactDto.SubCategoryId.Value)?.Name"/></p>
    }
    else
    {
        <label><L Key="ui.contact.details.custom_subcategory"/></label>
        <p class="data">@ContactDto.CustomSubCategory</p>
    }
    
    @if (IsAuthenticated)
    {
        <button class="layer2" @onclick="ShowDeletion"><L Key="ui.contact.details.delete"/></button>
        <button class="layer2" @onclick="ShowEdit"><L Key="ui.contact.details.edit"/></button>
    }
    else
    {
        <p><L Key="ui.contact.details.edit_login_required"/></p>
    }
</Modal>

@if (_showEdit)
{
    <EditModal ContactDto="ContactDto" OnClose="CloseEdit"></EditModal>
}

@if (_showDeletion)
{
    <DeleteModal OnDelete="Delete" OnClose="CloseDeletion"></DeleteModal>
}

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }
    [Parameter]
    public EventCallback OnDelete { get; set; }
    [Parameter]
    public ContactDto ContactDto { get; set; }
    
    private bool IsAuthenticated { get; set; }
    
    private bool _showEdit = false;
    private bool _showDeletion = false;

    private void ShowEdit() => _showEdit = true;
    private void CloseEdit() => _showEdit = false;

    private void ShowDeletion() => _showDeletion = true;
    private void CloseDeletion() => _showDeletion = false;
    
    private async Task Delete()
    {
        var success = await ContactsService.DeleteContact(ContactDto.Id);
        if (!success)
            return;
        
        _showEdit = false;
        _showDeletion = false;

        await OnDelete.InvokeAsync();
        await OnClose.InvokeAsync();
    }
    
    private async Task Close()
    {
        _showEdit = false;
        _showDeletion = false;
        
        await OnClose.InvokeAsync();
    }
    
    // We can't access logging in when we have this open anyway, so this should be fine.
    protected override async Task OnInitializedAsync()
    {
        IsAuthenticated = await AuthService.IsLoggedIn();
    }
}