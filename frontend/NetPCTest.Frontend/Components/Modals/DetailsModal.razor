@using NetPCTest.Frontend.Components;
@using NetPCTest.Frontend.Dtos
@using NetPCTest.Frontend.Models
@using NetPCTest.Frontend.Services
@inject IAuthService AuthService
@inject IContactsService ContactsService
@inject ICategoriesService CategoriesService

<Modal Header="ui.contact.details" OnClose="Close" MinimumWidth="500px">
    @if (_viewedContactDto is not null)
    {
        <label><L Key="ui.contact.details.name"/></label>
        <p class="data">@_viewedContactDto.Name</p>
        <label><L Key="ui.contact.details.surname"/></label>
        <p class="data">@_viewedContactDto.Surname</p>
        <label><L Key="ui.contact.details.email"/></label>
        <p class="data">@_viewedContactDto.Email</p>
        <label><L Key="ui.contact.details.phone"/></label>
        <p class="data">@_viewedContactDto.Phone</p>
        <label><L Key="ui.contact.details.birthdate"/></label>
        <p class="data">@_viewedContactDto.BirthDate</p>
        <hr noshade/>

        var category = CategoriesService.GetCategory(_viewedContactDto.CategoryId);
        
        <label><L Key="ui.contact.details.category"/></label>
        <p class="data"><L Key="@category?.Name"/></p>

        @if (_viewedContactDto.SubCategoryId != null)
        {
            <label><L Key="ui.contact.details.subcategory"/></label>
            <p class="data"><L Key="@CategoriesService.GetSubCategory(_viewedContactDto.SubCategoryId.Value)?.Name"/></p>
        }
        else if (category is not null && category.CustomSubcategoryRequired)
        {
            <label><L Key="ui.contact.details.custom_subcategory"/></label>
            <p class="data">@_viewedContactDto.CustomSubCategory</p>
        }

        @if (_isAuthenticated)
        {
            <button class="layer2" @onclick="ShowDeletion"><L Key="ui.contact.details.delete"/></button>
            <button class="layer2" @onclick="ShowEdit"><L Key="ui.contact.details.edit"/></button>
        }
        else
        {
            <p><L Key="ui.contact.details.edit_login_required"/></p>
        }
    }
</Modal>

@if (_showEdit)
{
    <EditModal ContactDto="_viewedContactDto" OnEdited="Edited" OnClose="CloseEdit"></EditModal>
}

@if (_showDeletion)
{
    <DeleteModal OnDelete="Delete" OnClose="CloseDeletion"></DeleteModal>
}

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }
    [Parameter]
    public EventCallback OnDeleted { get; set; }
    [Parameter]
    public EventCallback OnEdited { get; set; }
    [Parameter]
    public int ContactId { get; set; }

    private ContactDto? _viewedContactDto;
    private bool _isAuthenticated;
    private bool _showEdit = false;
    private bool _showDeletion = false;

    private void ShowEdit() => _showEdit = true;
    private void CloseEdit() => _showEdit = false;

    private void ShowDeletion() => _showDeletion = true;
    private void CloseDeletion() => _showDeletion = false;
    
    // We can't access logging in when we have this open anyway, so this should be fine.
    protected override async Task OnInitializedAsync()
    {
        _isAuthenticated = await AuthService.IsLoggedIn();
    }

    protected override async Task OnParametersSetAsync()
    {
        var contact = await ContactsService.GetContactAsync(ContactId);
        if (contact == null)
        {
            await base.OnParametersSetAsync();
            return;
        }

        _viewedContactDto = contact;
        
        await base.OnParametersSetAsync();
    }
    
    private async Task Delete()
    {
        var success = await ContactsService.DeleteContactAsync(ContactId);
        if (!success)
            return;
        
        _showEdit = false;
        _showDeletion = false;

        await OnDeleted.InvokeAsync();
        await OnClose.InvokeAsync();
    }
    
    private async Task Close()
    {
        _showEdit = false;
        _showDeletion = false;
        
        await OnClose.InvokeAsync();
    }

    private async Task Edited()
    {
        await OnEdited.InvokeAsync();
    }
}